package main

import (
	"encoding/json"
	"github.com/gorilla/mux"
	mgo "gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

// DB stores the database session imformation. Needs to be initialized once
type DB struct {
	session    *mgo.Session
	collection *mgo.Collection
}

// Movie holds a movie data
type Movie struct {
	ID       bson.ObjectId `json:"id" bson:"_id,omitempty"`
	Name     string        `json:"name" bson:"name"`
	Year     string        `json:"year" bson:"year"`
	Director string        `json:"directors" bson:"directors"`
	Writer   string        `json:"writers" bson:"writers"`
}

func main() {
	session, err := mgo.Dial("127.0.0.1")
	if err != nil {
		panic(err)
	}
	defer session.Close()
	c := session.DB("myDB").C("movies")
	db := &DB{session: session, collection: c}
	if err != nil {
		panic(err)
	}
	c.RemoveAll(nil)
	// create Index
	index := mgo.Index{
		Key:    []string{"name"},
		Unique: true,
	}
	err = c.EnsureIndex(index)
	if err != nil {
		panic(err)
	}
	// Insert Movie  MongoDB
	err = c.Insert(
		&Movie{
			Id:       bson.NewObjectId(),
			Name:     "The Dark Knight",
			Year:     "2008",
			Director: "Christopher Nolan",
			Writer:   "Jonathan Nolan",
		},
		&Movie{
			Id:       bson.NewObjectId(),
			Name:     "Hobbs and Shaw",
			Year:     "2019",
			Director: "David Leitch",
			Writer:   "Chris Morgan",
		},
		&Movie{
			Id:       bson.NewObjectId(),
			Name:     "Avengers Infinity War",
			Year:     "2018",
			Director: "Anthony Russo",
			Writer:   "Christopher Markus ",
		},
	)
	if err != nil {
		log.Fatal(err)
	}
	// Now query the movie back
	result := Movie{}
	// bson.M is used for nested fields
	err = c.Find(bson.M{"year": "2019"}).One(&result)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Movie:", result.Name)
}
